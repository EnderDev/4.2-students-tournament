name: Release
on: [push]
jobs:
    build:
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest]
        runs-on: ${{ matrix.os }}
        steps:
            - uses: actions/checkout@v3

            - name: Configure build toolchains
              shell: bash
              run: |
                if [ "${{ matrix.os }}" == "windows-latest" ]; then
                    echo "RS_TOOLCHAIN=stable-msvc" >> "$GITHUB_ENV"
                else 
                    echo "RS_TOOLCHAIN=stable" >> "$GITHUB_ENV"
                fi

            - name: Install dependencies
              shell: bash
              run: |
                pip install yq

            - uses: actions-rs/toolchain@v1
              with:
                profile: minimal
                toolchain: ${{ env.RS_TOOLCHAIN }}
                override: true

            - uses: actions-rs/cargo@v1
              with:
                command: build
                args: --release

            - name: Determine artifact name
              shell: bash
              run: |
                CARGO_NAME=$(cat Cargo.toml | tomlq -r ".bin[0].name")
                CARGO_VERSION=$(cat Cargo.toml | tomlq -r ".package.version")
                echo "CARGO_NAME=$CARGO_NAME" >> "$GITHUB_ENV"
                echo "CARGO_VERSION=$CARGO_VERSION" >> "$GITHUB_ENV"
                ARTIFACT_NAME="$CARGO_NAME-$CARGO_VERSION-$(./contrib/config.guess)"
                
                echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> "$GITHUB_ENV"

                if [ "${{ matrix.os }}" == "windows-latest" ]; then
                    echo "ARTIFACT_UPLOADED_NAME=$ARTIFACT_NAME.exe" >> "$GITHUB_ENV"
                    echo "BIN_NAME=$CARGO_NAME.exe" >> "$GITHUB_ENV"
                else 
                    echo "ARTIFACT_UPLOADED_NAME=$ARTIFACT_NAME" >> "$GITHUB_ENV"
                    echo "BIN_NAME=$CARGO_NAME" >> "$GITHUB_ENV"
                fi

            - uses: actions/upload-artifact@v3
              with:
                name: ${{ env.ARTIFACT_UPLOADED_NAME }}
                path: target/release/${{ env.BIN_NAME }}
        outputs:
            artifact_name: ${{ env.ARTIFACT_NAME }}
            version: ${{ env.CARGO_VERSION }}

    create-release:
        needs: [build]
        runs-on: ubuntu-latest
        permissions: write-all
        steps:
            - name: Get release details
              shell: bash
              run: |
                echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
                echo "CURR_DATE=$(date +"%d/%m/%Y")" >> "$GITHUB_ENV"

            - name: Create release
              id: release
              uses: actions/create-release@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name: ${{ env.CURR_DATE }}-${{ env.SHORT_SHA }}
                release_name: "Release ${{ env.CURR_DATE }} (${{ env.SHORT_SHA }})"
                draft: false
                prerelease: false
        outputs:
            upload_url: ${{ steps.release.outputs.upload_url }}

    release:
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest]
        needs: [create-release, build]
        runs-on: ${{ matrix.os }}
        permissions: write-all
        steps:
            - uses: actions/checkout@v3

            - name: Install dependencies
              shell: bash
              run: |
                pip install yq

            - name: Determine artifact name
              shell: bash
              run: |
                CARGO_NAME=$(cat Cargo.toml | tomlq -r ".bin[0].name")
                CARGO_VERSION=$(cat Cargo.toml | tomlq -r ".package.version")
                echo "CARGO_NAME=$CARGO_NAME" >> "$GITHUB_ENV"
                echo "CARGO_VERSION=$CARGO_VERSION" >> "$GITHUB_ENV"
                ARTIFACT_NAME="$CARGO_NAME-$CARGO_VERSION-$(./contrib/config.guess)"
                
                echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> "$GITHUB_ENV"

                if [ "${{ matrix.os }}" == "windows-latest" ]; then
                    echo "ARTIFACT_UPLOADED_NAME=$ARTIFACT_NAME.exe" >> "$GITHUB_ENV"
                    echo "BIN_NAME=$CARGO_NAME.exe" >> "$GITHUB_ENV"
                else 
                    echo "ARTIFACT_UPLOADED_NAME=$ARTIFACT_NAME" >> "$GITHUB_ENV"
                    echo "BIN_NAME=$CARGO_NAME" >> "$GITHUB_ENV"
                fi

            - uses: actions/download-artifact@v3
              with:
                name: ${{ env.ARTIFACT_UPLOADED_NAME }}

            - name: Get release details
              shell: bash
              if: matrix.os == 'ubuntu-latest'
              run: |
                ARTIFACT_LOCATION=$(pwd)/${{ env.BIN_NAME }}
                echo "ARTIFACT_LOCATION=$ARTIFACT_LOCATION" >> "$GITHUB_ENV"
                MIME_TYPE=$(file -i $ARTIFACT_LOCATION | python -c "import sys;print(sys.stdin.read().split(': ')[1].split('; ')[0])")
                echo "MIME_TYPE=$MIME_TYPE" >> "$GITHUB_ENV"

            - name: Get release details
              shell: bash
              if: matrix.os == 'windows-latest'
              run: |
                ARTIFACT_LOCATION_UNIX=$(pwd)/${{ env.BIN_NAME }}
                ARTIFACT_LOCATION=$(echo $ARTIFACT_LOCATION_UNIX | sed 's/\/d\//d:\\\\/g' | sed 's/\//\\/g')
                echo "ARTIFACT_LOCATION=$ARTIFACT_LOCATION" >> "$GITHUB_ENV"
                MIME_TYPE=$(file -i $ARTIFACT_LOCATION | python -c "import sys;print(sys.stdin.read().split(': ')[1].split('; ')[0])")
                echo "MIME_TYPE=$MIME_TYPE" >> "$GITHUB_ENV"

            - uses: actions/upload-release-asset@v1.0.1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ needs.release.outputs.upload_url }}
                asset_path: ${{ env.ARTIFACT_LOCATION }}
                asset_name: ${{ env.ARTIFACT_UPLOADED_NAME }}
                asset_content_type: ${{ env.MIME_TYPE }}