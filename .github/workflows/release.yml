name: Release
on:
    push:
        branches:
            - release

jobs:
    create-release:
        permissions:
            contents: write
        runs-on: ubuntu-20.04
        outputs:
            release_id: ${{ steps.create-release.outputs.result }}

        steps:
            - uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 16

            - name: Get app version
              run: |
                  echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
                  echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
                  echo "CURR_DATE=$(date +"%d/%m/%Y")" >> "$GITHUB_ENV"

            - name: Create release
              id: create-release
              uses: actions/github-script@v6
              with:
                  script: |
                      const { data } = await github.rest.repos.createRelease({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        tag_name: `v${process.env.PACKAGE_VERSION}-${process.env.SHORT_SHA}`,
                        name: `Students Tournament v${process.env.PACKAGE_VERSION} - ${process.env.CURR_DATE}`,
                        body: `Students Tournament build ${process.env.CURR_DATE} ${process.env.SHORT_SHA}`,
                        draft: true,
                        prerelease: false
                      })
                      return data.id

    build:
        needs: create-release
        permissions:
            contents: write
        strategy:
            fail-fast: false
            matrix:
                platform: [macos-latest, ubuntu-20.04, windows-latest]

        runs-on: ${{ matrix.platform }}
        steps:
            - uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 16

            - name: Install Rust nightly toolchain
              uses: dtolnay/rust-toolchain@master
              with:
                  toolchain: nightly

            - name: Install system dependencies
              if: matrix.platform == 'ubuntu-20.04'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

            - name: Install frontend dependencies
              run: yarn install

            - uses: tauri-apps/tauri-action@v0
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  releaseId: ${{ needs.create-release.outputs.release_id }}

    publish-release:
        permissions:
            contents: write
        runs-on: ubuntu-20.04
        needs: [create-release, build]

        steps:
            - name: Publish release
              id: publish-release
              uses: actions/github-script@v6
              env:
                  release_id: ${{ needs.create-release.outputs.release_id }}
              with:
                  script: |
                      github.rest.repos.updateRelease({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        release_id: process.env.release_id,
                        draft: false,
                        prerelease: false
                      })
